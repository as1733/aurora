{"_id":{"$oid":"588ff00090560164487a790f"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893c88dfb8e51f038dd2b65"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893c895fb8e51f038dd2b6e"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893c89bfb8e51f038dd2b74"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893c8a0fb8e51f038dd2b78"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893e3c5fb8e51f038dd61af"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"CODOPEDIAC3","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893e3dafb8e51f038dd61c0"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"storm95","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"5893e3e0fb8e51f038dd61c8"},"solution":"#include \u003cbits/stdc++.h\u003e\nusing namespace std;\n\nstring add(string, string);\nstring subtract(string, string);\nstring getAns(string, int);\n\nconst int MXN = 60;\nconst int MXK = 60;\nstring dp[MXN][MXK][2][2];\n\nint main(){\n\u0009for(int i = 0;i \u003c MXN;++i){\n\u0009\u0009for(int j = 0;j \u003c MXN;++j){\n\u0009\u0009\u0009for(int k = 0;k \u003c 2;++k){\n\u0009\u0009\u0009\u0009for(int l = 0;l \u003c 2;++l){\n\u0009\u0009\u0009\u0009\u0009dp[i][j][k][l] = \"0\";\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009int t; scanf(\"%d\", \u0026t);\n\u0009while(t--){\n\u0009\u0009string L, R; int K;\n\u0009\u0009cin \u003e\u003e L \u003e\u003e R \u003e\u003e K;\n\u0009\u0009string ans = getAns(R, K);\n\u0009\u0009if(L != \"0\"){\n\u0009\u0009\u0009ans = subtract(ans, getAns(subtract(L, \"1\"), K));\n\u0009\u0009}\n\u0009\u0009cout \u003c\u003c ans \u003c\u003c \"\\n\";\n\u0009}\n\u0009return 0;\n}\nstring add(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0' + B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009for(;i \u003c (int)B.size();++i){\n\u0009\u0009int r = (B[i] - '0' + carry);\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009\u0009carry = (r / 10);\n\u0009}\n\u0009while(carry){\n\u0009\u0009ans.push_back(carry % 10 + '0');\n\u0009\u0009carry /= 10;\n\u0009}\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\nstring subtract(string A, string B){\n\u0009reverse(A.begin(), A.end());\n\u0009reverse(B.begin(), B.end());\n\u0009string ans = \"\";\n\u0009int carry = 0, i;\n\u0009for(i = 0;((i \u003c (int)A.size()) \u0026\u0026 (i \u003c (int)B.size()));++i){\n\u0009\u0009int r = (A[i] - '0') - (B[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009for(;i \u003c (int)A.size();++i){\n\u0009\u0009int r = (A[i] - '0');\n\u0009\u0009r += carry;\n\u0009\u0009carry = 0;\n\u0009\u0009while(r \u003c 0){\n\u0009\u0009\u0009carry -= 1;\n\u0009\u0009\u0009r += 10;\n\u0009\u0009}\n\u0009\u0009ans.push_back(r % 10 + '0');\n\u0009}\n\u0009while(!ans.empty() \u0026\u0026 ans.back() == '0'){\n\u0009\u0009ans.pop_back();\n\u0009}\n\u0009if(ans.empty()) ans.push_back('0');\n\u0009reverse(ans.begin(), ans.end());\n\u0009return ans;\n}\n\nstring getAns(string N, int K){\n\u0009for(int i = 1;i \u003c= (int)N.size();++i){\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009dp[i][rem][0][0] = dp[i][rem][0][1] = dp[i][rem][1][0] = dp[i][rem][1][1] = \"0\";\n\u0009\u0009}\n\u0009\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009\u0009for(int dig = 0;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K != 0){\n\u0009\u0009\u0009\u0009\u0009//0 equal //1 smaller\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][0][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][0][1] = add(dp[i][(rem * 10 + dig) % K][0][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if((rem * 10 + dig) % K == 0){\n\u0009\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][0][0]);\n\u0009\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][0][1]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009if(dig \u003c= N[i - 1] - '0'){\n\u0009\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)] = add(dp[i][(rem * 10 + dig) % K][1][(dig \u003c N[i - 1] - '0' ? 1 : 0)], dp[i - 1][rem][1][0]);\n\u0009\u0009\u0009\u0009}\n\u0009\u0009\u0009\u0009dp[i][(rem * 10 + dig) % K][1][1] = add(dp[i][(rem * 10 + dig) % K][1][1], dp[i - 1][rem][1][1]);\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009\u0009if(i == 1){\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= (N[i - 1] - '0');++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009} else {\n\u0009\u0009\u0009//Add those numbers whose all digits till now are 0\n\u0009\u0009\u0009for(int dig = 1;dig \u003c= 9;++dig){\n\u0009\u0009\u0009\u0009dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)] = add(dp[i][dig % K][(dig % K == 0 ? 1 : 0)][(i == 1?(dig \u003c N[i - 1] - '0' ? 1 : 0):1)], \"1\");\n\u0009\u0009\u0009}\n\u0009\u0009}\n\u0009}\n\u0009string ans = \"0\";\n\u0009for(int rem = 0;rem \u003c K;++rem){\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][0]);\n\u0009\u0009ans = add(ans, dp[N.size()][rem][1][1]);\n\u0009}\n\u0009return ans;\n}\n","problemCode":"TEST","contestCode":"PRACTICE","langId":{"$oid":"588fbab9fb8e51f038dbe537"},"handle":"storm95","subtasksResult":[{"memoryTaken":2.8,"timeTaken":0.6,"verdict":"AC","score":20},{"memoryTaken":2.9,"timeTaken":1.6,"verdict":"WA","score":0},{"memoryTaken":3.8,"timeTaken":3.0,"verdict":"TLE","score":0}],"overAllResult":{"timeTaken":3.0,"memoryTaken":3.8,"verdict":"TLE","score":20}}
{"_id":{"$oid":"589730786d012076cc02add3"},"solution":"\nd\nfdgdg\nd\nfg\ndfg\ndf\ng\ndf\ngdf\ng\nf","problemCode":"TEST","contestCode":"PRACTICE","lang":"C++","handle":null}
{"_id":{"$oid":"589d935fb6f2f81ca0789e70"},"solution":"#include\u003cbits/stdc++.h\u003e\nusing namespace std;\nint main()\n{\n    int x;\n    assert(x == 1234); \nwhile(scanf(\"%d\",\u0026x)!=EOF)\n    {\n        printf(\"%d\\n\",x*x);\n    }\n    return 0;\n}","problemCode":"SQ","contestCode":"PRACTICE","lang":"C++","handle":"storm95"}
